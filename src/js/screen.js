'use strict';

const keyboard = require('./keyboard');
const {
  FEEDBACK_CONTACT,
  ACOUNT_NAME,
  ACCOUNT_NUMBER,
} = process.env;

class Screen {
  constructor(bot) {
    this._bot = bot;
  }


  welcome(chatId, events) {
    const text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ù–∞ –∫–∞–∫—É—é –≤—Å—Ç—Ä–µ—á—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è?';

    this._bot.sendMessage(chatId, text, {
      reply_markup: {
        inline_keyboard: keyboard.welcome(events),
      },
    });
  }


  userListMistake(chatId, events) {
    const text = '–í—ã–±–µ—Ä–µ—Ç–µ –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –∑–∞–ø–∏—Å–∏.';

    this._bot.sendMessage(chatId, text, {
      reply_markup: {
        inline_keyboard: keyboard.welcome(events),
      },
    });
  }


  eventWithPoster(chatId, event, posterPath) {
    const text = event.description;

    this._bot.sendPhoto(chatId, posterPath, {
      caption: text,
      reply_markup: {
        inline_keyboard: keyboard.event(event.id),
      },
    }, {
      filename: event.poster,
      contentType: 'image/*',
    });
  }


  event(chatId, event) {
    const text = event.description;

    this._bot.sendMessage(chatId, text, {
      caption: text,
      reply_markup: {
        inline_keyboard: keyboard.event(event.id),
      },
    });
  }


  userEventNotFound(chatId) {
    const text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ—Ç.';

    this._bot.sendMessage(chatId, text);
  }


  eventMistake(chatId) {
    const text = '–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?';

    this._bot.sendMessage(chatId, text, {
      reply_markup: {
        inline_keyboard: keyboard.reset(),
      },
    });
  }


  userTicket(chatId, ticket) {
    const text = `–°–∫–æ–ª—å–∫–æ –≤–∞–º –±–∏–ª–µ—Ç–æ–≤? –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${ticket}`;

    this._bot.sendMessage(chatId, text);
  }


  userTicketSoldOut(chatId) {
    const text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–∏–ª–µ—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç';

    this._bot.sendMessage(chatId, text);
  }


  userTicketSoMany(chatId, ticket) {
    const text = `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ç–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ ${ticket}`;

    this._bot.sendMessage(chatId, text);
  }


  name(chatId, selectedTickets) {
    const text = `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${selectedTickets} –±–∏–ª–µ—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è.`;

    this._bot.sendMessage(chatId, text);
  }


  nameMistake(chatId) {
    const text = '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.';

    this._bot.sendMessage(chatId, text);
  }


  phone(chatId) {
    const text = '–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';

    this._bot.sendMessage(chatId, text);
  }


  phoneMistake(chatId) {
    const text = '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ø—É—Å–∫–∞—é—Ç—å—Å—è —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª –∏ —Å–∏–º–≤–æ–ª—ã "+", "-", "(", ")")';

    this._bot.sendMessage(chatId, text);
  }


  async userPayment(chatId, event) {
    const textInfoPay = `${event.infopay}\nAccount number / Name:`;
    const textRequestReceipt = '–ë—Ä–æ–Ω—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.';

    await this._bot.sendMessage(chatId, textInfoPay);
    await this._bot.sendMessage(chatId, ACCOUNT_NUMBER);
    await this._bot.sendMessage(chatId, ACOUNT_NAME);
    this._bot.sendMessage(chatId, textRequestReceipt, {
      reply_markup: {
        inline_keyboard: keyboard.payment(),
      },
    });
  }


  paymentMistake(chatId) {
    const text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.';

    this._bot.sendMessage(chatId, text, {
      reply_markup: {
        inline_keyboard: keyboard.payment(),
      },
    });
  }


  userReturnPolicy(chatId) {
    const text = `–ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–º–µ–Ω—ã:\n
–ï—Å–ª–∏ –≤–∞—à–∏ –ø–ª–∞–Ω—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å, –±–æ–ª–µ–µ, —á–µ–º –∑–∞ 2 –¥–Ω—è (48 —á) –¥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Ç–æ –º—ã –≤–µ—Ä–Ω–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—Å—é —Ä–∞–Ω–µ–µ –≤–Ω–µ—Å–µ–Ω–Ω—É—é —Å—É–º–º—É.\n
–ï—Å–ª–∏ –≤–∞—à–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –º–µ–Ω–µ–µ, —á–µ–º –∑–∞ 2 –¥–Ω—è (48 —á) –¥–æ –≤—Å—Ç—Ä–µ—á–∏, —Ç–æ –º—ã –≤–µ—Ä–Ω–µ–º 50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–∞.\n
–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.\n
üí´ –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–æ–∑–≤—Ä–∞—Ç—É —Å–≤—è–∂–∏—Ç–µ—Å—å —Å ${FEEDBACK_CONTACT}`;

    this._bot.sendMessage(chatId, text);
  }

  check(chatId) {
    const text = '–°–ø–∞—Å–∏–±–æ! –ú—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –∑–∞ –≤–∞–º–∏ –º–µ—Å—Ç–∞. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É.';

    this._bot.sendMessage(chatId, text);
  }


  userCheckReceipt(chatId) {
    const text = '–ú—ã —Å–µ–π—á–∞—Å –ø—Ä–æ–≤–µ—Ä–∏–º —á–µ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –ø–æ—Ç–≤–µ—Ä–∂–µ–¥–Ω–∏–µ.';

    this._bot.sendMessage(chatId, text);
  }


  userDone(chatId) {
    const text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞. –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏.';

    this._bot.sendMessage(chatId, text);
  }


  userUndone(chatId) {
    const text = `–ü–æ—á–µ–º—É-—Ç–æ –º—ã –Ω–µ –≤–∏–¥–µ–º –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ—à—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å ${FEEDBACK_CONTACT}`;

    this._bot.sendMessage(chatId, text);
  }


  userNoticeEvent(chatId, event) {
    const text = event.notice;

    this._bot.sendMessage(chatId, text, {
      disable_web_page_preview: true,
    });
  }


  userTimeUp(chatId) {
    const text = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ –≤—ã—à–ª–æ. –í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞–Ω–æ–≤–æ';

    this._bot.sendMessage(chatId, text, {
      reply_markup: {
        inline_keyboard: keyboard.reset(),
      },
    });
  }


  async chanelReceipt(chanelId, msg, stateUser) {
    const {message_id, from: {id, username}} = msg;
    const {event, name, phone, countTicket} = stateUser;

    const text = `–ò–º—è: ${name}
username: ${username}
phone: ${phone}
ticket: ${countTicket}
event: ${event.id}
`;

    await this._bot.forwardMessage(chanelId, id, message_id);
    this._bot.sendMessage(chanelId, text, {
      reply_markup: {
        inline_keyboard: keyboard.chanel(id, event.id),
      },
    });
  }


  chanelBadRequest(chanelId) {
    const text = '–ö–ª–∞–≤–∏—à–∏ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã';

    this._bot.sendMessage(chanelId, text);
  }


  chanelUserHasNoOrders(chanelId) {
    const text = '–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –ø–æ—á–µ–º—É-—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É.';

    this._bot.sendMessage(chanelId, text);
  }


  chanelNoEvent(chanelId) {
    const text = '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.';

    this._bot.sendMessage(chanelId, text);
  }


  chanelResponce(chanelId) {
    const text = '–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.';

    this._bot.sendMessage(chanelId, text);
  }
}

module.exports = Screen;
